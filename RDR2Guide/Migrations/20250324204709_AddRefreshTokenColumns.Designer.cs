// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace RDR2Guide.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250324204709_AddRefreshTokenColumns")]
    partial class AddRefreshTokenColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimalUser", b =>
                {
                    b.Property<int>("AnimalsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnimalsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AnimalUser");
                });

            modelBuilder.Entity("ChallengeUser", b =>
                {
                    b.Property<int>("ChallengesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChallengesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChallengeUser");
                });

            modelBuilder.Entity("CollectibleUser", b =>
                {
                    b.Property<int>("CollectiblesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CollectiblesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CollectibleUser");
                });

            modelBuilder.Entity("Entities.Models.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Hostility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLegendary")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hostility = "Friendly",
                            Image = "animals/1.webp",
                            IsLegendary = false,
                            LocationId = 1,
                            Name = "American Domestic Cat"
                        },
                        new
                        {
                            Id = 2,
                            Hostility = "Enemy",
                            Image = "animals/2.webp",
                            IsLegendary = false,
                            LocationId = 3,
                            Name = "Cougar"
                        },
                        new
                        {
                            Id = 3,
                            Hostility = "Neutral",
                            Image = "animals/3.webp",
                            IsLegendary = false,
                            LocationId = 3,
                            Name = "California Valley Coyote"
                        },
                        new
                        {
                            Id = 4,
                            Hostility = "Neutral",
                            Image = "animals/4.webp",
                            IsLegendary = false,
                            LocationId = 3,
                            Name = "Bison"
                        },
                        new
                        {
                            Id = 5,
                            Hostility = "Neutral",
                            Image = "animals/5.webp",
                            IsLegendary = false,
                            LocationId = 3,
                            Name = "Black-tailed Jackrabbit"
                        },
                        new
                        {
                            Id = 6,
                            Hostility = "Neutral",
                            Image = "animals/6.webp",
                            IsLegendary = false,
                            LocationId = 3,
                            Name = "American Fox"
                        },
                        new
                        {
                            Id = 7,
                            Hostility = "Neutral",
                            Image = "animals/7.webp",
                            IsLegendary = false,
                            LocationId = 3,
                            Name = "American Pronghorn Doe"
                        },
                        new
                        {
                            Id = 8,
                            Hostility = "Neutral",
                            Image = "animals/8.webp",
                            IsLegendary = false,
                            LocationId = 3,
                            Name = "American Red Fox"
                        },
                        new
                        {
                            Id = 9,
                            Hostility = "Enemy",
                            Image = "animals/9.webp",
                            IsLegendary = false,
                            LocationId = 12,
                            Name = "American Black Bear"
                        },
                        new
                        {
                            Id = 10,
                            Hostility = "Neutral",
                            Image = "animals/10.webp",
                            IsLegendary = false,
                            LocationId = 12,
                            Name = "American Crow"
                        });
                });

            modelBuilder.Entity("Entities.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.Property<string>("Reward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Hold up 5 townsfolk.",
                            Name = "Bandit",
                            Rank = (byte)1,
                            Reward = "Bandit Bandolier"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Rob any 2 coaches or return any 2 stolen coaches to the Fence.",
                            Name = "Bandit",
                            Rank = (byte)2,
                            Reward = "25 Dead Eye XP, $5.00"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Win 5 hands of poker.",
                            Name = "Gambler",
                            Rank = (byte)1,
                            Reward = "Gambler Holster"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Win 3 gameы of Five Finger Fillet.",
                            Name = "Gambler",
                            Rank = (byte)3,
                            Reward = "Gambler Bandolier"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Catch 3 Bluegill fish.",
                            Name = "Survivalist",
                            Rank = (byte)1,
                            Reward = "Survivalist Gun Belt"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Find a treasure map.",
                            Name = "Explorer",
                            Rank = (byte)1,
                            Reward = "Explorer Holster"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Jump over 3 obstacles in 15 seconds.",
                            Name = "Horseman",
                            Rank = (byte)2,
                            Reward = "25 Stamina XP, $5.00"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Track 10 different animal species using your binoculars.",
                            Name = "Master Hunter",
                            Rank = (byte)3,
                            Reward = "Master Hunter Bandolier"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Kill 3 enemies with a knife.",
                            Name = "Weapons Expert",
                            Rank = (byte)1,
                            Reward = "Weapons Expert Holster"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Pick one of each species of herb.",
                            Name = "Herbalist",
                            Rank = (byte)9,
                            Reward = "150 Health XP, $20.00"
                        });
                });

            modelBuilder.Entity("Entities.Models.Collectible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Amount")
                        .HasColumnType("tinyint");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SidequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SidequestId")
                        .IsUnique()
                        .HasFilter("[SidequestId] IS NOT NULL");

                    b.ToTable("Collectibles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = (byte)144,
                            Image = "collectibles/1.webp",
                            Name = "Cigarette Cards",
                            SidequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = (byte)10,
                            Image = "collectibles/2.webp",
                            Name = "Rock Carvings",
                            SidequestId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = (byte)30,
                            Image = "collectibles/3.webp",
                            Name = "Dinosaur Bones",
                            SidequestId = 3
                        },
                        new
                        {
                            Id = 4,
                            Amount = (byte)9,
                            Image = "collectibles/4.jpg",
                            Name = "Graves of your fallen companions"
                        },
                        new
                        {
                            Id = 5,
                            Amount = (byte)10,
                            Image = "collectibles/5.webp",
                            Name = "Fish species"
                        },
                        new
                        {
                            Id = 6,
                            Amount = (byte)5,
                            Image = "collectibles/6.webp",
                            Name = "Hunting requests"
                        },
                        new
                        {
                            Id = 7,
                            Amount = (byte)20,
                            Image = "collectibles/7.webp",
                            Name = "Dreamcatchers"
                        },
                        new
                        {
                            Id = 8,
                            Amount = (byte)48,
                            Image = "collectibles/8.webp",
                            Name = "Weapons"
                        },
                        new
                        {
                            Id = 9,
                            Amount = (byte)20,
                            Image = "collectibles/9.webp",
                            Name = "Plant species"
                        },
                        new
                        {
                            Id = 10,
                            Amount = (byte)6,
                            Image = "collectibles/10.webp",
                            Name = "Gangs"
                        });
                });

            modelBuilder.Entity("Entities.Models.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Leader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Factions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Leader = "Colm O'Driscoll",
                            Name = "O'Driscoll Boys",
                            Status = "Disbanded"
                        },
                        new
                        {
                            Id = 2,
                            Leader = "Lindsey Wofford",
                            Name = "Lemoyne Raiders",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Leader = "Otis Skinner",
                            Name = "Skinner Brothers",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            Leader = "Walt Murfree",
                            Name = "Murfree Brood",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            Leader = "Laramie Gang Leader",
                            Name = "Laramie Gang",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 6,
                            Leader = "Esteban Cortez",
                            Name = "Del Lobo Gang",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Entities.Models.Fish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bait")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLegendary")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Fish");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bait = "Cheese",
                            IsLegendary = false,
                            LocationId = 4,
                            Name = "Bluegill"
                        },
                        new
                        {
                            Id = 2,
                            Bait = "Crayfish",
                            IsLegendary = false,
                            LocationId = 6,
                            Name = "Largemouth Bass"
                        },
                        new
                        {
                            Id = 3,
                            Bait = "Special Lake Lure",
                            IsLegendary = true,
                            LocationId = 5,
                            Name = "Legendary Bluegill"
                        },
                        new
                        {
                            Id = 4,
                            Bait = "Corn",
                            IsLegendary = false,
                            LocationId = 14,
                            Name = "Bullhead Catfish"
                        },
                        new
                        {
                            Id = 5,
                            Bait = "Special Swamp Lure",
                            IsLegendary = true,
                            LocationId = 14,
                            Name = "Legendary Bullhead Catfish"
                        },
                        new
                        {
                            Id = 6,
                            Bait = "Corn",
                            IsLegendary = false,
                            LocationId = 4,
                            Name = "Chain Pickerel"
                        },
                        new
                        {
                            Id = 7,
                            Bait = "Special River Lure",
                            IsLegendary = true,
                            LocationId = 4,
                            Name = "Legendary Chain Pickerel"
                        },
                        new
                        {
                            Id = 8,
                            Bait = "Lake Lure",
                            IsLegendary = false,
                            LocationId = 14,
                            Name = "Lake Sturgeon"
                        },
                        new
                        {
                            Id = 9,
                            Bait = "Special River Lure",
                            IsLegendary = true,
                            LocationId = 14,
                            Name = "Legendary Lake Sturgeon"
                        },
                        new
                        {
                            Id = 10,
                            Bait = "Bread",
                            IsLegendary = false,
                            LocationId = 12,
                            Name = "Perch"
                        });
                });

            modelBuilder.Entity("Entities.Models.Horse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Acceleration")
                        .HasColumnType("tinyint");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Handling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Health")
                        .HasColumnType("tinyint");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<byte>("Speed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Stamina")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Horses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Acceleration = (byte)4,
                            Breed = "American Paint",
                            Handling = "Standard",
                            Health = (byte)5,
                            Image = "horses/1.webp",
                            LocationId = 7,
                            Speed = (byte)4,
                            Stamina = (byte)5
                        },
                        new
                        {
                            Id = 2,
                            Acceleration = (byte)4,
                            Breed = "American Standardbred",
                            Handling = "Race",
                            Health = (byte)3,
                            Image = "horses/2.webp",
                            LocationId = 1,
                            Speed = (byte)5,
                            Stamina = (byte)3
                        },
                        new
                        {
                            Id = 3,
                            Acceleration = (byte)6,
                            Breed = "Arabian",
                            Handling = "Elite",
                            Health = (byte)6,
                            Image = "horses/3.webp",
                            LocationId = 8,
                            Speed = (byte)6,
                            Stamina = (byte)6
                        },
                        new
                        {
                            Id = 4,
                            Acceleration = (byte)5,
                            Breed = "Turkoman",
                            Handling = "Standard",
                            Health = (byte)7,
                            Image = "horses/4.webp",
                            LocationId = 8,
                            Speed = (byte)6,
                            Stamina = (byte)5
                        },
                        new
                        {
                            Id = 5,
                            Acceleration = (byte)3,
                            Breed = "Appaloosa",
                            Handling = "Standard",
                            Health = (byte)3,
                            Image = "horses/5.webp",
                            LocationId = 12,
                            Speed = (byte)3,
                            Stamina = (byte)4
                        },
                        new
                        {
                            Id = 6,
                            Acceleration = (byte)3,
                            Breed = "Ardennes",
                            Handling = "Standard",
                            Health = (byte)5,
                            Image = "horses/6.webp",
                            LocationId = 14,
                            Speed = (byte)3,
                            Stamina = (byte)4
                        },
                        new
                        {
                            Id = 7,
                            Acceleration = (byte)3,
                            Breed = "Belgian Draft Horse",
                            Handling = "Heavy",
                            Health = (byte)3,
                            Image = "horses/7.webp",
                            LocationId = 1,
                            Speed = (byte)3,
                            Stamina = (byte)3
                        },
                        new
                        {
                            Id = 8,
                            Acceleration = (byte)3,
                            Breed = "Dutch Warmblood",
                            Handling = "Standard",
                            Health = (byte)5,
                            Image = "horses/8.webp",
                            LocationId = 1,
                            Speed = (byte)4,
                            Stamina = (byte)6
                        },
                        new
                        {
                            Id = 9,
                            Acceleration = (byte)3,
                            Breed = "Hungarian Half-bred",
                            Handling = "Standard",
                            Health = (byte)5,
                            Image = "horses/9.webp",
                            LocationId = 4,
                            Speed = (byte)3,
                            Stamina = (byte)4
                        },
                        new
                        {
                            Id = 10,
                            Acceleration = (byte)2,
                            Breed = "Kentucky Saddler",
                            Handling = "Standard",
                            Health = (byte)3,
                            Image = "horses/10.webp",
                            LocationId = 12,
                            Speed = (byte)3,
                            Stamina = (byte)2
                        });
                });

            modelBuilder.Entity("Entities.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "locations/1.webp",
                            Name = "Valentine"
                        },
                        new
                        {
                            Id = 2,
                            Image = "locations/2.webp",
                            Name = "Strawberry"
                        },
                        new
                        {
                            Id = 3,
                            Image = "locations/3.webp",
                            Name = "New Hanover"
                        },
                        new
                        {
                            Id = 4,
                            Image = "locations/4.webp",
                            Name = "West Elizabeth"
                        },
                        new
                        {
                            Id = 5,
                            Image = "locations/5.webp",
                            Name = "Scarlett Meadows"
                        },
                        new
                        {
                            Id = 6,
                            Image = "locations/6.webp",
                            Name = "Bayou Nwa"
                        },
                        new
                        {
                            Id = 7,
                            Image = "locations/7.webp",
                            Name = "Tumbleweed"
                        },
                        new
                        {
                            Id = 8,
                            Image = "locations/8.webp",
                            Name = "Blackwater"
                        },
                        new
                        {
                            Id = 9,
                            Image = "locations/9.webp",
                            Name = "Colter"
                        },
                        new
                        {
                            Id = 10,
                            Image = "locations/10.webp",
                            Name = "Horseshoe Overlook"
                        },
                        new
                        {
                            Id = 11,
                            Image = "locations/11.webp",
                            Name = "Cornwall Kerosene&Tar"
                        },
                        new
                        {
                            Id = 12,
                            Image = "locations/12.webp",
                            Name = "Ambarino"
                        },
                        new
                        {
                            Id = 13,
                            Image = "locations/13.webp",
                            Name = "Saint Denis"
                        },
                        new
                        {
                            Id = 14,
                            Image = "locations/14.webp",
                            Name = "Lemoyne"
                        },
                        new
                        {
                            Id = 15,
                            Image = "locations/15.webp",
                            Name = "New Austin"
                        },
                        new
                        {
                            Id = 16,
                            Image = "locations/16.webp",
                            Name = "Guarma island"
                        });
                });

            modelBuilder.Entity("Entities.Models.Miscellaneous", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Miscellaneous");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Investigate any 5 shacks."
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kill any 5 Legendary Animals."
                        },
                        new
                        {
                            Id = 3,
                            Name = "Play each table game at least once."
                        },
                        new
                        {
                            Id = 4,
                            Name = "Interact with 5 special characters."
                        },
                        new
                        {
                            Id = 5,
                            Name = "Take a bath at least once. (Available in hotels)"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Watch a show."
                        },
                        new
                        {
                            Id = 7,
                            Name = "Watch a live show at the Theater."
                        },
                        new
                        {
                            Id = 8,
                            Name = "Craft 1 recipe from six different category types."
                        },
                        new
                        {
                            Id = 9,
                            Name = "Complete a Home Robbery, a Shop Robbery, a Coach Robbery and a Train Robbery."
                        });
                });

            modelBuilder.Entity("Entities.Models.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdible")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "plants/1.webp",
                            IsEdible = true,
                            LocationId = 4,
                            Name = "Alaskan Ginseng"
                        },
                        new
                        {
                            Id = 2,
                            Image = "plants/2.webp",
                            IsEdible = false,
                            LocationId = 6,
                            Name = "Oleander Sage"
                        },
                        new
                        {
                            Id = 3,
                            Image = "plants/3.webp",
                            IsEdible = true,
                            LocationId = 3,
                            Name = "American Ginseng"
                        },
                        new
                        {
                            Id = 4,
                            Image = "plants/4.webp",
                            IsEdible = false,
                            LocationId = 14,
                            Name = "Hummingbird Sage"
                        },
                        new
                        {
                            Id = 5,
                            Image = "plants/5.webp",
                            IsEdible = false,
                            LocationId = 4,
                            Name = "Golden Currant"
                        },
                        new
                        {
                            Id = 6,
                            Image = "plants/6.webp",
                            IsEdible = false,
                            LocationId = 12,
                            Name = "English Mace"
                        },
                        new
                        {
                            Id = 7,
                            Image = "plants/7.webp",
                            IsEdible = true,
                            LocationId = 15,
                            Name = "Desert Sage"
                        },
                        new
                        {
                            Id = 8,
                            Image = "plants/8.webp",
                            IsEdible = false,
                            LocationId = 6,
                            Name = "Common Bulrush"
                        },
                        new
                        {
                            Id = 9,
                            Image = "plants/9.webp",
                            IsEdible = false,
                            LocationId = 12,
                            Name = "Blackcurrant"
                        },
                        new
                        {
                            Id = 10,
                            Image = "plants/10.webp",
                            IsEdible = true,
                            LocationId = 4,
                            Name = "Burdock Root"
                        });
                });

            modelBuilder.Entity("Entities.Models.Randomencounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.ToTable("Randomencounters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FactionId = 1,
                            Name = "Stagecoach Robbery"
                        },
                        new
                        {
                            Id = 2,
                            FactionId = 2,
                            Name = "Gatling Gun Ambush"
                        },
                        new
                        {
                            Id = 3,
                            FactionId = 2,
                            Name = "Arson and Vandalism at the Saint Denis City Hall"
                        },
                        new
                        {
                            Id = 4,
                            FactionId = 4,
                            Name = "Camp Intimidation"
                        },
                        new
                        {
                            Id = 5,
                            FactionId = 4,
                            Name = "Burning Wagon Attack"
                        },
                        new
                        {
                            Id = 6,
                            FactionId = 5,
                            Name = "Hostage Situation"
                        },
                        new
                        {
                            Id = 7,
                            FactionId = 6,
                            Name = "Venter's Place Party"
                        },
                        new
                        {
                            Id = 8,
                            FactionId = 6,
                            Name = "Del Lobo Breakout"
                        },
                        new
                        {
                            Id = 9,
                            FactionId = 1,
                            Name = "Train Robbery"
                        },
                        new
                        {
                            Id = 10,
                            FactionId = 1,
                            Name = "Prison Wagon Break"
                        });
                });

            modelBuilder.Entity("Entities.Models.Sidequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMissable")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("MissableChapter")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestGiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Sidequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "sideQuests/1.webp",
                            IsMissable = false,
                            LocationId = 1,
                            Name = "Smoking and other Hobbies",
                            QuestGiver = "Phineas T. Ramsbottom",
                            Reward = "Vintage Civil War Handcuffs"
                        },
                        new
                        {
                            Id = 2,
                            Image = "sideQuests/2.webp",
                            IsMissable = false,
                            LocationId = 2,
                            Name = "Geology for Beginners",
                            QuestGiver = "Francis Sinclair",
                            Reward = "Rock Statue"
                        },
                        new
                        {
                            Id = 3,
                            Image = "sideQuests/3.webp",
                            IsMissable = false,
                            LocationId = 1,
                            Name = "A Test of Faith",
                            QuestGiver = "Deborah MacGuiness",
                            Reward = "Quartz Chunk"
                        },
                        new
                        {
                            Id = 4,
                            Image = "sideQuests/4.webp",
                            IsMissable = false,
                            LocationId = 1,
                            Name = "The Noblest of Men, and a Woman",
                            QuestGiver = "Theodore Levin",
                            Reward = "Letter from Theodore Levin, $350"
                        },
                        new
                        {
                            Id = 5,
                            Image = "sideQuests/5.webp",
                            IsMissable = false,
                            LocationId = 3,
                            Name = "The Smell of the Grease Paint",
                            QuestGiver = "Miss Marjorie",
                            Reward = "Letter from Miss Marjorie, $40"
                        },
                        new
                        {
                            Id = 6,
                            Image = "sideQuests/6.webp",
                            IsMissable = false,
                            LocationId = 5,
                            Name = "The Iniquities of History",
                            QuestGiver = "Jeremiah Compson",
                            Reward = "Honor"
                        },
                        new
                        {
                            Id = 7,
                            Image = "sideQuests/7.webp",
                            IsMissable = false,
                            LocationId = 5,
                            Name = "The Ties That Bind Us",
                            QuestGiver = "Sampson Black & Wendell White",
                            Reward = "$40 or Positive Honor"
                        },
                        new
                        {
                            Id = 8,
                            Image = "sideQuests/8.webp",
                            IsMissable = false,
                            LocationId = 14,
                            Name = "He's British, of Course",
                            QuestGiver = "Margaret",
                            Reward = "Emerald"
                        },
                        new
                        {
                            Id = 9,
                            Image = "sideQuests/9.webp",
                            IsMissable = false,
                            LocationId = 13,
                            Name = "The Artist's Way",
                            QuestGiver = "Charles Chatenay",
                            Reward = "Missable Otis Miller's Revolver"
                        },
                        new
                        {
                            Id = 10,
                            Image = "sideQuests/10.webp",
                            IsMissable = false,
                            LocationId = 13,
                            Name = "Duchesses and Other Animals",
                            QuestGiver = "Algernon Wasp",
                            Reward = "$750, Exotic Hat, Algernon's Revolver"
                        });
                });

            modelBuilder.Entity("Entities.Models.Storyquest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Reward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Storyquests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "storyQuests/1.webp",
                            LocationId = 9,
                            Name = "Outlaws from the West",
                            Number = 1,
                            Reward = "Mahogany Boy Tennessee Walker"
                        },
                        new
                        {
                            Id = 2,
                            Image = "storyQuests/2.webp",
                            LocationId = 10,
                            Name = "Pouring Forth Oil I",
                            Number = 1
                        },
                        new
                        {
                            Id = 3,
                            Image = "storyQuests/3.webp",
                            LocationId = 11,
                            Name = "Pouring Forth Oil II",
                            Number = 2
                        },
                        new
                        {
                            Id = 4,
                            Image = "storyQuests/4.webp",
                            LocationId = 13,
                            Name = "Angelo Bronte, A Man of Honor",
                            Number = 1
                        },
                        new
                        {
                            Id = 5,
                            Image = "storyQuests/5.webp",
                            LocationId = 13,
                            Name = "Help a Brother Out",
                            Number = 1,
                            Reward = "$1.00 (Optional)"
                        },
                        new
                        {
                            Id = 6,
                            Image = "storyQuests/6.webp",
                            LocationId = 16,
                            Name = "Hell Hath No Fury",
                            Number = 1
                        },
                        new
                        {
                            Id = 7,
                            Image = "storyQuests/7.webp",
                            LocationId = 16,
                            Name = "Paradise Mercifully Departed",
                            Number = 1
                        },
                        new
                        {
                            Id = 8,
                            Image = "storyQuests/8.webp",
                            LocationId = 3,
                            Name = "Dear Uncle Tacitus",
                            Number = 1
                        },
                        new
                        {
                            Id = 9,
                            Image = "storyQuests/9.webp",
                            LocationId = 3,
                            Name = "That's Murfree Country",
                            Number = 1,
                            Reward = "Mauser Pistol available in gunsmiths, Unlocks Legendary Bullgator"
                        },
                        new
                        {
                            Id = 10,
                            Image = "storyQuests/10.webp",
                            LocationId = 13,
                            Name = "A Fork in the Road",
                            Number = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.Tablegame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tablegames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The player can participate in games of poker throughout the game world. Poker is often used as a money-making method, but the process is a risk as you can either lose or earn considerable sums of cash. Saloons prominently feature poker tables.\r\n\r\nThe poker rules used in-game are those from no-limit Texas Hold 'Em. You should have at least a passing understanding of the rules as the game does not tell you all of the information on a winning hand, only the primary information. Winning hands (in order from worst to best) are as follows: High card, 1 pair, 2 pairs, 3 of a kind, straight (five cards in sequence such as 9-10-Jack-Queen-King), flush (5 of one suit), full house (three of a kind plus a pair), four of a kind, straight flush (5 sequential cards of the same suit), royal flush (as with straight flush but 10, Jack, Queen, King, Ace).\r\n\r\nPlayers may use any combination of the two cards they hold and the five community cards to form the best five-card hand. The nature of community-card poker games greatly increases the chance of two or more players each having strong hands, thus increasing the level of action (betting).",
                            Name = "Poker"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Blackjack is a type of card game, and is traditionally associated with betting and gambling. It is also known colloquially as Twenty-One and Pontoon. In North America during the early twentieth-century time period that Red Dead Redemption is set in, blackjack is a serious parlor game that can sometimes result in violent disputes and death.",
                            Name = "Blackjack"
                        },
                        new
                        {
                            Id = 3,
                            Description = "To play, the player places their hand palm-down on a table with his fingers spread apart. Using a knife, the player attempts to quickly strike the spaces between his fingers, while moving the knife back and forth, attempting to avoid injury. The higher the wager the user chooses the harder the pattern will be. The knife seems to be a larger version of the Throwing Knife.\r\n\r\nThis game is played competitively and cash is wagered on the outcome. The difficulty of the game increases with larger bets.",
                            Name = "Five Finger Fillet"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The goal is to empty your hand of dominoes first. It is done by placing dominoes with matching pips together. If a domino cannot be played, the player must draw from the \"boneyard\" until a playable domino is drawn. The first person to run out, wins.",
                            Name = "Dominoes"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Nickname = "Vadim123",
                            NormalizedUserName = "VADIM123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMKeNn06AtpLw6LN/2xipCEx9O1tQPXKhJ4VwlAEszEud3urZzmQIMN6iUtjRvZ7pQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d3eeae2-502f-433c-b834-7a32307a71f2",
                            TwoFactorEnabled = false,
                            UserName = "Vadim123"
                        },
                        new
                        {
                            Id = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Nickname = "Anton123",
                            NormalizedUserName = "ANTON123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEt/TdqSeFf0Z0WtnyMeFd0rfMxRaVcIi4TDw8Jroy1+cGq2pLvjBES+HJd+LTB6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b27fb73-2bcd-4950-9cdc-8297b07ef208",
                            TwoFactorEnabled = false,
                            UserName = "Anton123"
                        },
                        new
                        {
                            Id = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Nickname = "Arthur123",
                            NormalizedUserName = "ARTHUR123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMZ3O2UsEVs6MJfIE2YcydLtYORxhhBOMAeyRoSNF0qBuqlzddsBRvdtGW3L9CXTCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e64d2647-040f-465e-8c85-ae374c68faad",
                            TwoFactorEnabled = false,
                            UserName = "Arthur123"
                        });
                });

            modelBuilder.Entity("Entities.Models.UserAnimal", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AnimalId");

                    b.HasIndex("AnimalId");

                    b.ToTable("UserAnimals");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            AnimalId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            AnimalId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            AnimalId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            AnimalId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            AnimalId = 3
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            AnimalId = 4
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            AnimalId = 5
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            AnimalId = 6
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            AnimalId = 2
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            AnimalId = 5
                        });
                });

            modelBuilder.Entity("Entities.Models.UserChallenge", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ChallengeId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("UserChallenges");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            ChallengeId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            ChallengeId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            ChallengeId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            ChallengeId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            ChallengeId = 3
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            ChallengeId = 4
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            ChallengeId = 5
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            ChallengeId = 6
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            ChallengeId = 7
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            ChallengeId = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.UserCollectible", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CollectibleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CollectibleId");

                    b.HasIndex("CollectibleId");

                    b.ToTable("UserCollectibles");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            CollectibleId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            CollectibleId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            CollectibleId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            CollectibleId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            CollectibleId = 3
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            CollectibleId = 4
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            CollectibleId = 5
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            CollectibleId = 6
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            CollectibleId = 1
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            CollectibleId = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.UserFaction", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FactionId");

                    b.HasIndex("FactionId");

                    b.ToTable("UserFactions");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            FactionId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            FactionId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            FactionId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            FactionId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            FactionId = 4
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            FactionId = 5
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            FactionId = 6
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            FactionId = 1
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            FactionId = 2
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            FactionId = 3
                        });
                });

            modelBuilder.Entity("Entities.Models.UserFish", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FishId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FishId");

                    b.HasIndex("FishId");

                    b.ToTable("UserFish");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            FishId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            FishId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            FishId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            FishId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            FishId = 4
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            FishId = 5
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            FishId = 6
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            FishId = 1
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            FishId = 2
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            FishId = 3
                        });
                });

            modelBuilder.Entity("Entities.Models.UserHorse", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HorseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "HorseId");

                    b.HasIndex("HorseId");

                    b.ToTable("UserHorses");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            HorseId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            HorseId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            HorseId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            HorseId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            HorseId = 5
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            HorseId = 1
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            HorseId = 2
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            HorseId = 3
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            HorseId = 4
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            HorseId = 5
                        });
                });

            modelBuilder.Entity("Entities.Models.UserMiscellaneous", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MiscellaneousId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MiscellaneousId");

                    b.HasIndex("MiscellaneousId");

                    b.ToTable("UserMiscellaneous");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            MiscellaneousId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            MiscellaneousId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            MiscellaneousId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            MiscellaneousId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            MiscellaneousId = 3
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            MiscellaneousId = 4
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            MiscellaneousId = 1
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            MiscellaneousId = 2
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            MiscellaneousId = 3
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            MiscellaneousId = 4
                        });
                });

            modelBuilder.Entity("Entities.Models.UserPlant", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PlantId");

                    b.HasIndex("PlantId");

                    b.ToTable("UserPlants");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            PlantId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            PlantId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            PlantId = 1
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            PlantId = 3
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            PlantId = 4
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            PlantId = 5
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            PlantId = 6
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            PlantId = 7
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            PlantId = 8
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            PlantId = 9
                        });
                });

            modelBuilder.Entity("Entities.Models.UserRandomencounter", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RandomencounterId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RandomencounterId");

                    b.HasIndex("RandomencounterId");

                    b.ToTable("UserRandomencounters");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            RandomencounterId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            RandomencounterId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            RandomencounterId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            RandomencounterId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            RandomencounterId = 3
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            RandomencounterId = 4
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            RandomencounterId = 5
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            RandomencounterId = 6
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            RandomencounterId = 7
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            RandomencounterId = 3
                        });
                });

            modelBuilder.Entity("Entities.Models.UserSidequest", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SidequestId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SidequestId");

                    b.HasIndex("SidequestId");

                    b.ToTable("UserSidequests");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            SidequestId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            SidequestId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            SidequestId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            SidequestId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            SidequestId = 3
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            SidequestId = 4
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            SidequestId = 5
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            SidequestId = 1
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            SidequestId = 2
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            SidequestId = 3
                        });
                });

            modelBuilder.Entity("Entities.Models.UserStoryquest", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StoryquestId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "StoryquestId");

                    b.HasIndex("StoryquestId");

                    b.ToTable("UserStoryquests");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            StoryquestId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            StoryquestId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            StoryquestId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            StoryquestId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            StoryquestId = 3
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            StoryquestId = 4
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            StoryquestId = 5
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            StoryquestId = 1
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            StoryquestId = 2
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            StoryquestId = 3
                        });
                });

            modelBuilder.Entity("Entities.Models.UserTablegame", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TablegameId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TablegameId");

                    b.HasIndex("TablegameId");

                    b.ToTable("UserTablegames");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            TablegameId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            TablegameId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            TablegameId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            TablegameId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            TablegameId = 3
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            TablegameId = 4
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            TablegameId = 3
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            TablegameId = 1
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            TablegameId = 2
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            TablegameId = 3
                        });
                });

            modelBuilder.Entity("Entities.Models.UserWeapon", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("UserWeapons");

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            WeaponId = 1
                        },
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            WeaponId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            WeaponId = 1
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            WeaponId = 2
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            WeaponId = 3
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            WeaponId = 4
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            WeaponId = 5
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            WeaponId = 1
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            WeaponId = 2
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            WeaponId = 3
                        });
                });

            modelBuilder.Entity("Entities.Models.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int?>("Cost")
                        .HasColumnType("int");

                    b.Property<float>("Damage")
                        .HasColumnType("real");

                    b.Property<float>("FiringRate")
                        .HasColumnType("real");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Range")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Weapons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accuracy = 2.8f,
                            Cost = 50,
                            Damage = 1.7f,
                            FiringRate = 3f,
                            Image = "weapons/1.webp",
                            IsUnique = false,
                            LocationId = 1,
                            Name = "Cattleman Revolver",
                            Range = 2f
                        },
                        new
                        {
                            Id = 2,
                            Accuracy = 2.8f,
                            Damage = 1.7f,
                            FiringRate = 3f,
                            Image = "weapons/2.webp",
                            IsUnique = true,
                            LocationId = 2,
                            Name = "Granger's Revolver",
                            Range = 2f
                        },
                        new
                        {
                            Id = 3,
                            Accuracy = 3f,
                            Cost = 84,
                            Damage = 1.9f,
                            FiringRate = 2.8f,
                            Image = "weapons/3.webp",
                            IsUnique = false,
                            LocationId = 1,
                            Name = "Schofield Revolver",
                            Range = 2f
                        },
                        new
                        {
                            Id = 4,
                            Accuracy = 2.8f,
                            Damage = 1.7f,
                            FiringRate = 3f,
                            Image = "weapons/4.webp",
                            IsUnique = true,
                            LocationId = 12,
                            Name = "Flaco's Revolver",
                            Range = 2f
                        },
                        new
                        {
                            Id = 5,
                            Accuracy = 2f,
                            Cost = 65,
                            Damage = 1.5f,
                            FiringRate = 3.2f,
                            Image = "weapons/5.webp",
                            IsUnique = false,
                            LocationId = 1,
                            Name = "Double-action Revolver",
                            Range = 2f
                        },
                        new
                        {
                            Id = 6,
                            Accuracy = 2.8f,
                            Cost = 190,
                            Damage = 1.5f,
                            FiringRate = 3.2f,
                            Image = "weapons/6.webp",
                            IsUnique = false,
                            LocationId = 1,
                            Name = "High Roller Double-Action Revolver",
                            Range = 2f
                        },
                        new
                        {
                            Id = 7,
                            Accuracy = 3.2f,
                            Cost = 350,
                            Damage = 1.5f,
                            FiringRate = 3.1f,
                            Image = "weapons/7.webp",
                            IsUnique = false,
                            LocationId = 13,
                            Name = "M1899 Pistol",
                            Range = 2f
                        },
                        new
                        {
                            Id = 8,
                            Accuracy = 3f,
                            Cost = 140,
                            Damage = 2f,
                            FiringRate = 2.6f,
                            Image = "weapons/8.webp",
                            IsUnique = false,
                            LocationId = 1,
                            Name = "Evans Repeater",
                            Range = 2.6f
                        },
                        new
                        {
                            Id = 9,
                            Accuracy = 2.7f,
                            Cost = 145,
                            Damage = 2.8f,
                            FiringRate = 2.2f,
                            Image = "weapons/9.webp",
                            IsUnique = false,
                            LocationId = 1,
                            Name = "Litchfield Repeater",
                            Range = 2.8f
                        },
                        new
                        {
                            Id = 10,
                            Accuracy = 1.8f,
                            Cost = 95,
                            Damage = 2.8f,
                            FiringRate = 2.5f,
                            Image = "weapons/10.webp",
                            IsUnique = false,
                            LocationId = 1,
                            Name = "Double-barreled Shotgun",
                            Range = 1.5f
                        });
                });

            modelBuilder.Entity("FactionUser", b =>
                {
                    b.Property<int>("FactionsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FactionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FactionUser");
                });

            modelBuilder.Entity("FishUser", b =>
                {
                    b.Property<int>("FishId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FishId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FishUser");
                });

            modelBuilder.Entity("HorseUser", b =>
                {
                    b.Property<int>("HorsesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HorsesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("HorseUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4b9d4e0f-e217-4cb8-9dfc-98615530aeb7",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "8273b272-fb26-42a0-ba3f-0a7117b8f674",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e78cdca8-703d-4993-aff8-6c722bb80609",
                            RoleId = "4b9d4e0f-e217-4cb8-9dfc-98615530aeb7"
                        },
                        new
                        {
                            UserId = "40f7db0b-5cad-4cae-b82e-b4263eb90c40",
                            RoleId = "4b9d4e0f-e217-4cb8-9dfc-98615530aeb7"
                        },
                        new
                        {
                            UserId = "d3c2cf7b-0328-41db-8f5b-c381f0a7bf16",
                            RoleId = "4b9d4e0f-e217-4cb8-9dfc-98615530aeb7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MiscellaneousUser", b =>
                {
                    b.Property<int>("MiscellaneousId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MiscellaneousId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("MiscellaneousUser");
                });

            modelBuilder.Entity("PlantUser", b =>
                {
                    b.Property<int>("PlantsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlantsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PlantUser");
                });

            modelBuilder.Entity("RandomencounterUser", b =>
                {
                    b.Property<int>("RandomencountersId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RandomencountersId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RandomencounterUser");
                });

            modelBuilder.Entity("SidequestUser", b =>
                {
                    b.Property<int>("SidequestsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SidequestsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("SidequestUser");
                });

            modelBuilder.Entity("StoryquestUser", b =>
                {
                    b.Property<int>("StoryquestsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StoryquestsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("StoryquestUser");
                });

            modelBuilder.Entity("TablegameUser", b =>
                {
                    b.Property<int>("TablegamesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TablegamesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TablegameUser");
                });

            modelBuilder.Entity("UserWeapon", b =>
                {
                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WeaponsId")
                        .HasColumnType("int");

                    b.HasKey("UsersId", "WeaponsId");

                    b.HasIndex("WeaponsId");

                    b.ToTable("UserWeapon");
                });

            modelBuilder.Entity("AnimalUser", b =>
                {
                    b.HasOne("Entities.Models.Animal", null)
                        .WithMany()
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChallengeUser", b =>
                {
                    b.HasOne("Entities.Models.Challenge", null)
                        .WithMany()
                        .HasForeignKey("ChallengesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollectibleUser", b =>
                {
                    b.HasOne("Entities.Models.Collectible", null)
                        .WithMany()
                        .HasForeignKey("CollectiblesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Animal", b =>
                {
                    b.HasOne("Entities.Models.Location", "Location")
                        .WithMany("Animals")
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Entities.Models.Collectible", b =>
                {
                    b.HasOne("Entities.Models.Sidequest", "Sidequest")
                        .WithOne("Collectible")
                        .HasForeignKey("Entities.Models.Collectible", "SidequestId");

                    b.Navigation("Sidequest");
                });

            modelBuilder.Entity("Entities.Models.Fish", b =>
                {
                    b.HasOne("Entities.Models.Location", "Location")
                        .WithMany("Fish")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Entities.Models.Horse", b =>
                {
                    b.HasOne("Entities.Models.Location", "Location")
                        .WithMany("Horses")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Entities.Models.Plant", b =>
                {
                    b.HasOne("Entities.Models.Location", "Location")
                        .WithMany("Plants")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Entities.Models.Randomencounter", b =>
                {
                    b.HasOne("Entities.Models.Faction", "Faction")
                        .WithMany("Randomencounters")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");
                });

            modelBuilder.Entity("Entities.Models.Sidequest", b =>
                {
                    b.HasOne("Entities.Models.Location", "Location")
                        .WithMany("Sidequests")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Entities.Models.Storyquest", b =>
                {
                    b.HasOne("Entities.Models.Location", "Location")
                        .WithMany("Storyquests")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Entities.Models.UserAnimal", b =>
                {
                    b.HasOne("Entities.Models.Animal", "Animal")
                        .WithMany("UserAnimals")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserAnimals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserChallenge", b =>
                {
                    b.HasOne("Entities.Models.Challenge", "Challenge")
                        .WithMany("UserChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserChallenges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserCollectible", b =>
                {
                    b.HasOne("Entities.Models.Collectible", "Collectible")
                        .WithMany("UserCollectibles")
                        .HasForeignKey("CollectibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserCollectibles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collectible");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserFaction", b =>
                {
                    b.HasOne("Entities.Models.Faction", "Faction")
                        .WithMany("UserFactions")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserFactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserFish", b =>
                {
                    b.HasOne("Entities.Models.Fish", "Fish")
                        .WithMany("UserFish")
                        .HasForeignKey("FishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserFish")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserHorse", b =>
                {
                    b.HasOne("Entities.Models.Horse", "Horse")
                        .WithMany("UserHorses")
                        .HasForeignKey("HorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserHorses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserMiscellaneous", b =>
                {
                    b.HasOne("Entities.Models.Miscellaneous", "Miscellaneous")
                        .WithMany("UserMiscellaneous")
                        .HasForeignKey("MiscellaneousId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserMiscellaneous")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Miscellaneous");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserPlant", b =>
                {
                    b.HasOne("Entities.Models.Plant", "Plant")
                        .WithMany("UserPlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserPlants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserRandomencounter", b =>
                {
                    b.HasOne("Entities.Models.Randomencounter", "Randomencounter")
                        .WithMany("UserRandomencounters")
                        .HasForeignKey("RandomencounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserRandomencounters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Randomencounter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserSidequest", b =>
                {
                    b.HasOne("Entities.Models.Sidequest", "Sidequest")
                        .WithMany("UserSidequests")
                        .HasForeignKey("SidequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserSidequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sidequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserStoryquest", b =>
                {
                    b.HasOne("Entities.Models.Storyquest", "Storyquest")
                        .WithMany("UserStoryquests")
                        .HasForeignKey("StoryquestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserStoryquests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storyquest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserTablegame", b =>
                {
                    b.HasOne("Entities.Models.Tablegame", "Tablegame")
                        .WithMany("UserTablegames")
                        .HasForeignKey("TablegameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserTablegames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tablegame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserWeapon", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UserWeapons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Weapon", "Weapon")
                        .WithMany("UserWeapons")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Entities.Models.Weapon", b =>
                {
                    b.HasOne("Entities.Models.Location", "Location")
                        .WithMany("Weapons")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FactionUser", b =>
                {
                    b.HasOne("Entities.Models.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishUser", b =>
                {
                    b.HasOne("Entities.Models.Fish", null)
                        .WithMany()
                        .HasForeignKey("FishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HorseUser", b =>
                {
                    b.HasOne("Entities.Models.Horse", null)
                        .WithMany()
                        .HasForeignKey("HorsesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiscellaneousUser", b =>
                {
                    b.HasOne("Entities.Models.Miscellaneous", null)
                        .WithMany()
                        .HasForeignKey("MiscellaneousId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantUser", b =>
                {
                    b.HasOne("Entities.Models.Plant", null)
                        .WithMany()
                        .HasForeignKey("PlantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RandomencounterUser", b =>
                {
                    b.HasOne("Entities.Models.Randomencounter", null)
                        .WithMany()
                        .HasForeignKey("RandomencountersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SidequestUser", b =>
                {
                    b.HasOne("Entities.Models.Sidequest", null)
                        .WithMany()
                        .HasForeignKey("SidequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoryquestUser", b =>
                {
                    b.HasOne("Entities.Models.Storyquest", null)
                        .WithMany()
                        .HasForeignKey("StoryquestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TablegameUser", b =>
                {
                    b.HasOne("Entities.Models.Tablegame", null)
                        .WithMany()
                        .HasForeignKey("TablegamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserWeapon", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Weapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Animal", b =>
                {
                    b.Navigation("UserAnimals");
                });

            modelBuilder.Entity("Entities.Models.Challenge", b =>
                {
                    b.Navigation("UserChallenges");
                });

            modelBuilder.Entity("Entities.Models.Collectible", b =>
                {
                    b.Navigation("UserCollectibles");
                });

            modelBuilder.Entity("Entities.Models.Faction", b =>
                {
                    b.Navigation("Randomencounters");

                    b.Navigation("UserFactions");
                });

            modelBuilder.Entity("Entities.Models.Fish", b =>
                {
                    b.Navigation("UserFish");
                });

            modelBuilder.Entity("Entities.Models.Horse", b =>
                {
                    b.Navigation("UserHorses");
                });

            modelBuilder.Entity("Entities.Models.Location", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Fish");

                    b.Navigation("Horses");

                    b.Navigation("Plants");

                    b.Navigation("Sidequests");

                    b.Navigation("Storyquests");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("Entities.Models.Miscellaneous", b =>
                {
                    b.Navigation("UserMiscellaneous");
                });

            modelBuilder.Entity("Entities.Models.Plant", b =>
                {
                    b.Navigation("UserPlants");
                });

            modelBuilder.Entity("Entities.Models.Randomencounter", b =>
                {
                    b.Navigation("UserRandomencounters");
                });

            modelBuilder.Entity("Entities.Models.Sidequest", b =>
                {
                    b.Navigation("Collectible");

                    b.Navigation("UserSidequests");
                });

            modelBuilder.Entity("Entities.Models.Storyquest", b =>
                {
                    b.Navigation("UserStoryquests");
                });

            modelBuilder.Entity("Entities.Models.Tablegame", b =>
                {
                    b.Navigation("UserTablegames");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("UserAnimals");

                    b.Navigation("UserChallenges");

                    b.Navigation("UserCollectibles");

                    b.Navigation("UserFactions");

                    b.Navigation("UserFish");

                    b.Navigation("UserHorses");

                    b.Navigation("UserMiscellaneous");

                    b.Navigation("UserPlants");

                    b.Navigation("UserRandomencounters");

                    b.Navigation("UserSidequests");

                    b.Navigation("UserStoryquests");

                    b.Navigation("UserTablegames");

                    b.Navigation("UserWeapons");
                });

            modelBuilder.Entity("Entities.Models.Weapon", b =>
                {
                    b.Navigation("UserWeapons");
                });
#pragma warning restore 612, 618
        }
    }
}
